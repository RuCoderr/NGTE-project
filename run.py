from aiogram import Dispatcher, F
from aiogram.filters import CommandObject, CommandStart, Command, BaseFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import TelegramObject
from aiogram.utils.deep_linking import create_start_link, decode_payload
from referral_storage import pending_referrals
from anketa import *
from admin_panel import *
from dotenv import load_dotenv
import os


load_dotenv()
admin_ids_str = os.getenv('ADMIN_IDS', '')
admins = list(map(int, admin_ids_str.split(','))) if admin_ids_str else []
DB_PATH = os.getenv('DATABASE_PATH', '/tmp/Form.db')


bot = Bot(TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class IsAdmin(BaseFilter):
    async def __call__(self, obj: TelegramObject) -> bool:
        return obj.from_user.id in admins



def get_ids():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT ID FROM Form')
    ids = cursor.fetchall()
    ids = [item[0] for item in ids]
    return ids

command_args = ''


async def start(message: Message, command: CommandObject):
    keyboard = [
        [types.KeyboardButton(text='üíµ –†–∞–±–æ—Ç–∞—Ç—å')],
        [types.KeyboardButton(text='‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'),
         types.KeyboardButton(text='üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –∫—É—Ä–∞—Ç–æ—Ä—É')],
        [types.KeyboardButton(text='üö™ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')]
    ]
    reply_markup = types.ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )
    user_id = message.from_user.id
    referrer_id = None

    if command.args:
        try:
            referrer_id = int(decode_payload(command.args))
        except:
            referrer_id = None
    conn = await aiosqlite.connect(DB_PATH)
    cursor = await conn.cursor()
    await cursor.execute("SELECT ID FROM Form")
    all_ids = [row[0] for row in await cursor.fetchall()]

    if referrer_id and referrer_id != user_id and user_id not in all_ids:
        await cursor.execute("SELECT 1 FROM Form WHERE ID = ?", (referrer_id,))
        if await cursor.fetchone():
            pending_referrals[user_id] = referrer_id


    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –≤ –ø—Ä–µ—Å—Ç–∏–∂–Ω—É—é —ç—Å—Ç–æ–Ω—Å–∫—É—é –∫–æ–º–ø–∞–Ω–∏—é\n\n'
        '–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É: /start_form',
        reply_markup=reply_markup
    )


async def rabota(message: Message):
    user_id = message.from_user.id
    if user_id not in get_ids():
        await message.answer("‚õî –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É: \n/start_form")
        return

    user_id = message.from_user.id

    ref_link = await create_start_link(bot, payload=str(user_id), encode=True)
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π",
            url=f"https://t.me/share/url?url={ref_link}&text=–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è!"
        )]
    ])

    conn = await aiosqlite.connect(DB_PATH)
    cursor = await conn.cursor()
    await cursor.execute("SELECT Status FROM Form WHERE ID = ?", (user_id,))
    status = await cursor.fetchone()
    t = (f"–í—ã –µ—â—ë –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—à–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –ß—Ç–æ–±—ã —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–∏—Ç—å—Å—è - –Ω–∞–ø–∏—à–∏—Ç–µ –∫—É—Ä–∞—Ç–æ—Ä—É –∏ –æ–Ω "
        f"–≤–∞–º –≤—Å—ë –æ–±—ä—è—Å–Ω–∏—Ç" if status[0] == '–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ' else "–í—ã —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–µ–Ω—ã, –æ–¥–Ω–∞–∫–æ –≥—Ä—É–ø–ø–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –µ—â—ë –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞. "
                                                                "–û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞") + ("\n\n–ê –ø–æ–∫–∞ "
        "–ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π, –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ "
        f"—Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥\n\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n"
        f"<code>{ref_link}</code>\n\n"
        f"üí∞ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 6 —Ä—É–±–ª–µ–π!" )

    await message.answer(t, reply_markup=keyboard, parse_mode='HTML')


async def lk(message: Message):
    user_id = message.from_user.id
    if user_id not in get_ids():
        await message.answer("‚õî –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É: \n/start_form")
        return
    conn = await aiosqlite.connect(DB_PATH)
    cursor = await conn.cursor()
    await cursor.execute("SELECT Balance FROM Form WHERE ID = ?", (user_id,))
    bal = await cursor.fetchone()
    await cursor.execute("SELECT Status FROM Form WHERE ID = ?", (user_id,))
    status = await cursor.fetchone()
    await cursor.execute("SELECT Code FROM Form WHERE ID = ?", (user_id,))
    code = await cursor.fetchone()
    await message.answer(f'–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\nüÜî –í–∞—à ID: <code>{user_id}</code>\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüíº –í–∞—à '
                         f'–∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: <b>{int(code[0])}</b>\nüí≥ –í–∞—à '
                         f'–±–∞–ª–∞–Ω—Å: <b>{int(bal[0])} —Ä—É–±</b>\nüì∂ –¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: <b>{str(status[0])}</b>\n\n‚ÄºÔ∏è–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥: –æ—Ç 1000 —Ä—É–±–ª–µ–π', parse_mode='HTML')


async def info(message: Message):
    user_id = message.from_user.id
    if user_id not in get_ids():
        await message.answer("‚õî –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É: \n/start_form")
        return

    await message.answer('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏:–ú—ã ‚Äî –≠—Å—Ç–æ–Ω—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è Next-Gen Tech-Ecosystems, –∫–æ—Ç–æ—Ä–∞—è –∞–∫—Ç–∏–≤–Ω–æ '
    '–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∞—à–∏ –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–æ–≤—ã–µ —É—Å–ª—É–≥–∏ –Ω–∞ –≤—Å–µ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏. –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç '
    '–Ω–∞—Å—Ç–æ—è—â–∏–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º IT –≥–∏–≥–∞–Ω—Ç–∞–º –º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –≤–Ω–µ–¥—Ä—è—Ç—å –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏. –ú—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞–µ–º –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç'
    ' —Å —Ç–∞–∫–∏–º–∏ –≥–∏–≥–∞–Ω—Ç–∞–º–∏, –∫–∞–∫: –Ø–Ω–¥–µ–∫—Å, Ozon, 3Logic Group, VK, –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è¬†–ö–∞—Å–ø–µ—Ä—Å–∫–æ–≥–æ. \n\n–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–æ–º: \n\nüíµ '
    '–†–∞–±–æ—Ç–∞ - –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–¥–∞–Ω–∏—è, –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—É—á–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ '
    '–Ω–∞ —Å—á—ë—Ç \nüö™ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç - –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –≤ –±–æ—Ç–µ \nüì¢ –ù–∞–ø–∏—Å–∞—Ç—å –∫—É—Ä–∞—Ç–æ—Ä—É - '
    '–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤–∏–ª—Å—è –≤–æ–ø—Ä–æ—Å / –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ —Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞. –ö–æ–≥–¥–∞ –∫—É—Ä–∞—Ç–æ—Ä '
    '–ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–µ—Ç–∏, –æ–Ω –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ \n\n‚ùó –ß—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞, –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å '
                         '—Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.  –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–æ–≤–æ–¥—É —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É—Ç–æ—á–Ω—è–π—Ç–µ —É –∫—É—Ä–∞—Ç–æ—Ä–∞')


async def curator(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in get_ids():
        await message.answer("‚õî –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É: \n/start_form")
        return

    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä—É \n\n‚ùó–í–∞–∂–Ω–æ‚ùó\n '
                         '–ï—Å–ª–∏ –≤—ã –ø–æ–¥–∞—ë—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ: –Ø —Ö–æ—á—É –≤—ã–≤–µ—Å—Ç–∏ (—Å—É–º–º–∞)')
    await state.set_state(ToCurator.mess)

async def curator2(message: Message, state: FSMContext):
    try:
        for user_id in admins:
            with suppress(Exception):
                if message.photo:
                    caption = message.caption if message.caption else ""
                    await bot.send_photo(chat_id=user_id, photo=message.photo[-1].file_id, caption=caption)
                else:
                    await bot.send_message(chat_id=user_id, text=f'{message.text}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º <code>{message.from_user.id}</code>', parse_mode='HTML')
                await sleep(0.3)

        await message.answer('üëΩ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    except Exception as e:
        await message.answer(f'‚ò¢Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}')
    finally:
        await state.clear()



def register_handlers(dp: Dispatcher):
    dp.message.register(start, CommandStart())

    dp.message.register(start_form, F.text == '/start_form')
    dp.message.register(process_name, Form.name)
    dp.message.register(process_age, Form.age)
    dp.message.register(process_passport, Form.passport)
    dp.message.register(process_zarplata, Form.zarplata)
    dp.message.register(process_hobbies, Form.hobbies)
    dp.message.register(process_banks, Form.banks)

    dp.message.register(rabota, F.text == 'üíµ –†–∞–±–æ—Ç–∞—Ç—å')
    dp.message.register(lk, F.text == 'üö™ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
    dp.message.register(info, F.text == '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    dp.message.register(curator, F.text == 'üì¢ –ù–∞–ø–∏—Å–∞—Ç—å –∫—É—Ä–∞—Ç–æ—Ä—É')

    dp.message.register(admin_command, Command('admin'), IsAdmin())
    dp.message.register(get_db, F.text == '/db', IsAdmin())

    dp.callback_query.register(newsletter_handler, F.data == 'newsletter')
    dp.message.register(process_newsletter_message, AdminState.newsletter)

    dp.callback_query.register(letter_get_id, F.data == 'letter')
    dp.message.register(letter_get_message, Letter.idd)
    dp.message.register(letter_send_message, Letter.mess)

    dp.callback_query.register(edit_balance, F.data == 'balance')
    dp.message.register(edit_balance2, Balance.idd)
    dp.message.register(edit_balance3, Balance.mess)

    dp.callback_query.register(edit_status, F.data == 'status')
    dp.message.register(edit_status2, Status.idd)
    dp.message.register(edit_status3, Status.mess)

    dp.callback_query.register(get_list, F.data == 'list')

    dp.message.register(curator2, ToCurator.mess)
